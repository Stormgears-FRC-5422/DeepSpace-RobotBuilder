// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5422.Minimec.commands.Drive;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5422.Minimec.Robot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5422.Minimec.subsystems.PixyVision;
import org.usfirst.frc5422.Minimec.subsystems.NavX;
import org.usfirst.frc5422.Minimec.subsystems.TapeAlign;
import org.usfirst.frc5422.Minimec.subsystems.PixyVision.DockSelection;
import org.usfirst.frc5422.Minimec.subsystems.PixyVision.VisionMode;
import org.usfirst.frc5422.utils.StatusLight;
import org.usfirst.frc5422.utils.StormProp;
import org.usfirst.frc5422.utils.DeepSpaceTypes.DockTarget;

import javax.swing.plaf.synth.SynthToolTipUI;
/**
 *
 */
public class AutoDockDeliver extends Command {

    private Joystick joy;
    private DockTarget m_dock_target = DockTarget.SHIP_MIDDLE; // Desired dock to this command to approach
    private Boolean m_aligned = false;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDockDeliver() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);
    }

    // Constructor that accepts dock target as argument
    public AutoDockDeliver(DockTarget target){
        this();
        m_dock_target = target;
        if (target == DockTarget.ROCKET_LEFT || target == DockTarget.ROCKET_RIGHT) {
            if(Robot.useStatusLights) Robot.setStatusLight(StatusLight.Vision, 2);
        }
        else {
            if(Robot.useStatusLights) Robot.setStatusLight(StatusLight.Vision, 1);
        }
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.navX.enable(m_dock_target);
        Robot.tapeAlignSys.enable();
        Robot.drive.setBrakeMode();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double x,y,z;

        if (Robot.useDrive) {
            y = 0;
            x = Robot.tapeAlignSys.get_pid_output();  // tape system controls strafing
            if (x == 0) m_aligned = true;
            z = Robot.navX.get_pid_output();  // NavX controls turning
            if (m_aligned) y = .2;


            Robot.drive.driveArcade(x, y, z);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (Robot.useValveControl) {
            return Robot.valveControl.getHatchProxSensorReady();
        } else {
            return true;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drive.setCoastMode();
        Robot.navX.disable();
        Robot.tapeAlignSys.disable();

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.drive.setCoastMode();
        Robot.navX.disable();
        Robot.tapeAlignSys.disable();
    }
}
