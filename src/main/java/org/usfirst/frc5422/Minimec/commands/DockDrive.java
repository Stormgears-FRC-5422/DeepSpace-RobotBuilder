// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5422.Minimec.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import org.usfirst.frc5422.Minimec.Robot;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.*;  // Import the Collections class


/**
 *
 */
public class DockDrive extends PIDCommand {

    protected class PixyObject {
        private double m_y;
        private double m_height;
        private double m_width;
        private String m_type;
        private double m_x;

        public PixyObject(String type,double x, double y, double height, double width) {
            m_type = type;
            m_x = x;
            m_y = y;
            m_height = height;
            m_width = width;
        }
        public double getX() {
            return(m_x);
        }
        public double getY() {
            return(m_y);
        }
        public double getHeight() {
            return(m_height);
        }
        public double getWidth() {
            return(m_width);
        }
        public String getType() {
            return(m_type);
        }
        public double getArea() {
            return(m_width * m_height);
        }
    }   

    private NetworkTable m_vision_table;
    private Joystick joy;
    private double m_pid_out;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DockDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DockDrive", 0.01, 0.0, 0.0, 0.01);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.03);
        getPIDController().setOutputRange(-1.0, 1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        NetworkTableInstance inst = NetworkTableInstance.getDefault();
        m_vision_table = inst.getTable("vision");
        m_pid_out = 0.0;
    }

    @Override
    protected double returnPIDInput() {
        double[] default_data = new double[0];
        double centerX[];
        double centerY[];
        double height[];
        double width[];
        String type[];
        ArrayList<PixyObject> objects = new ArrayList<PixyObject>();
        

        centerX = m_vision_table.getEntry("centerX").getDoubleArray(default_data);
        centerY = m_vision_table.getEntry("centerY").getDoubleArray(default_data);
        height = m_vision_table.getEntry("height").getDoubleArray(default_data);
        width = m_vision_table.getEntry("width").getDoubleArray(default_data);
        type = m_vision_table.getEntry("Type").getStringArray(new String[0]);
        int i;
        for (i=0; i<type.length; i++) {
            PixyObject item = new PixyObject(type[i],centerX[i],centerY[i],height[i],width[i]);
            objects.add(item);
        }

        // Sort by closest to center
        List<PixyObject> sorted_objects = objects.stream()
            .filter(obj -> {
                return(obj.getType().equals("Dock"));
            })
            .sorted((a, b) -> {
                double a_dist_from_center = Math.abs(a.getX() - 160);
                double b_dist_from_center = Math.abs(b.getX() - 160);
                return(Double.compare(a_dist_from_center,b_dist_from_center));
            })
            .collect(Collectors.toList());   

        // Get middle of two objects closest to center
        double center_weight = 160;
        if (sorted_objects.size() > 1) {
            center_weight = (sorted_objects.get(0).getX() + sorted_objects.get(1).getX())/2;
            SmartDashboard.putString("PixyType","Dock Pair");
            SmartDashboard.putNumber("PixyCenterX",center_weight);
            return(160 - center_weight);
        } else if (sorted_objects.size() == 1) {
            SmartDashboard.putString("PixyType","Single Dock");
            SmartDashboard.putNumber("PixyCenterX",sorted_objects.get(0).getX());
            return(160 - sorted_objects.get(0).getX());
        } else {
            SmartDashboard.putString("PixyType","No Dock");
            return(0);
        }

        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        m_pid_out = output;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        joy = Robot.oi.getJoystick1();
        joy.setZChannel(4);  // XBOX controller
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double z_out = m_pid_out + joy.getZ();
        if (z_out > 1.0) z_out  = 1.0;
        if (z_out < -1.0) z_out = -1.0;
        SmartDashboard.putNumber("PixyDockPidOut",m_pid_out);
        Robot.drive.driveArcade(-1 * joy.getX(), joy.getY(), z_out);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
