// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5422.Minimec.commands.Arm;
import com.ctre.phoenix.motorcontrol.ControlMode;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5422.Minimec.Robot;
import org.usfirst.frc5422.Minimec.PixyObject.PixyType;
import org.usfirst.frc5422.Minimec.PixyObject;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5422.Minimec.subsystems.PixyVision;

/**
 *
 */
public class ArmOverride extends Command {
    private static ArmOverride instance;
    public static ArmOverride getInstance() {
        if(instance == null) instance = new ArmOverride();
        return instance;
    }

    Joystick joy;
    private double currentPosition;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ArmOverride() {
        requires(Robot.arm);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        joy = Robot.oi.getJoystick1();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if(getArmJoystick() == 1) {
            Robot.arm.moveUpManual();
            //System.out.println("JOYSTICK UP");
            currentPosition = Robot.arm.armTalon.getSensorCollection().getQuadraturePosition();
        }
        else if(getArmJoystick() == -1) {
            //System.out.println("JOYSTICK DOWN");
            Robot.arm.moveDownManual();
            currentPosition = Robot.arm.armTalon.getSensorCollection().getQuadraturePosition();
        }
        else if ((int)getArmJoystick() == 0){
            //System.out.println("JOYSTICK MIDDLE");
            Robot.arm.hold(currentPosition);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.arm.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.arm.stop();

    }

    private double getArmJoystick()
    {
        return -1 * Robot.oi.getJoystick2().getRawAxis(1);
    }
}
