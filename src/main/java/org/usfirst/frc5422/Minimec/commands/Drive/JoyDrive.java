// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5422.Minimec.commands.Drive;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

import java.time.Year;

import org.usfirst.frc5422.Minimec.Robot;
import org.usfirst.frc5422.utils.StormProp;

/**
 *
 */
public class JoyDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public JoyDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    private Joystick joy;
    
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        joy = Robot.oi.getJoystick();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //driveCartesian(oi.getJoystick().getRawAxis(0)*-1,
        // (oi.getJoystick().getRawAxis(3)-oi.getJoystick().getRawAxis(2))*-1,
        // oi.getJoystick().getRawAxis(4));
        double joy_vals[] = Robot.oi.getJoyXYZ(joy);
        double x = joy_vals[0];
        double y = joy_vals[1];
        double z = joy_vals[2];

        if(Robot.oi.getPrecisionDrive()) Robot.drive.driveArcade(0.25*x, 0.25*y, 0.25*z);
        else Robot.drive.driveArcade(x,y,z);

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
