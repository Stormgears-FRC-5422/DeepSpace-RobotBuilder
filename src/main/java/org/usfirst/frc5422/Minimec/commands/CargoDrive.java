// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5422.Minimec.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5422.Minimec.Robot;
import org.usfirst.frc5422.Minimec.PixyObject.PixyType;
import org.usfirst.frc5422.Minimec.PixyObject;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class CargoDrive extends Command {
    Joystick joy;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CargoDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        joy = Robot.oi.getJoystick1();
        Robot.pixyVision.enable(PixyType.CARGO);   
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double null_size = .1;
        double rate = 0.5 + (joy.getRawAxis(3) * .5);
        double z_out = joy.getZ();
        if (Math.abs(z_out) < null_size) z_out = 0;

        z_out = rate * joy.getZ();
        if (joy.getRawButton(5) == false) {
            // Button 5 will disable PID input to drive
            z_out += Robot.pixyVision.get_pid_output();
        } else {
            Robot.pixyVision.clearLastTracked();
        } 

        if (z_out > 1.0) z_out  = 1.0;
        if (z_out < -1.0) z_out = -1.0;

        double x_out = rate * joy.getX();
        double y_out = rate * -1 * joy.getY();

        // Create a joystick null zone to reduce drift
        if (Math.abs(x_out) < null_size) x_out = 0;
        if (Math.abs(y_out) < null_size) y_out = 0;

        SmartDashboard.putNumber("PixyVisionPidOut",Robot.pixyVision.get_pid_output());
        Robot.drive.driveArcade(x_out,y_out, z_out);
 }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.pixyVision.disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.pixyVision.disable();
    }
}
