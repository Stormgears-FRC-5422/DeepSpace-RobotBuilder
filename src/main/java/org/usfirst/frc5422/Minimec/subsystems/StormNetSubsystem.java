// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5422.Minimec.subsystems;


import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import org.usfirst.frc5422.Minimec.Robot;
import org.usfirst.frc5422.Minimec.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc5422.Minimec.subsystems.elevator.Elevator;
import org.usfirst.frc5422.Minimec.subsystems.stormnet.*;
import org.usfirst.frc5422.utils.StatusLight;
import org.usfirst.frc5422.utils.StormProp;

/**
 *
 */
public class StormNetSubsystem extends Subsystem {
    StormNet m_stormNet;
    ShuffleboardTab tab = Shuffleboard.getTab("StormNet");

    private Relay vacArmedLight;
    private Relay vacInsufficientLight;
    private Relay precisionModeLight;
    private Relay visionModeLight;

    public StormNetSubsystem() {
        Shuffleboard.selectTab("StormNet");
        if (Robot.useStatusLights) {
            vacInsufficientLight = new Relay(StormProp.getInt("vacInsufficientLightRelay" ,-1));
            vacArmedLight = new Relay(StormProp.getInt("vacArmedLightRelay" ,-1));
            precisionModeLight = new Relay(StormProp.getInt("precisionModeLightRelay" ,-1));
            visionModeLight = new Relay(StormProp.getInt("visionModeLightRelay" ,-1));
        }
    }

    public void connect() {
        System.out.println("in subsystem connect");

        System.out.println("initializing StormNet");
        StormNet.init();

        System.out.println("get instance:");
        m_stormNet = StormNet.getInstance();

        if (Robot.testStormNet) {
            System.out.println("testing");
            m_stormNet.test();
            System.out.println("done testing");
        } else System.out.println("not testing");
    }

    public void stop() {
        m_stormNet.stop();
    }

    @Override
    public void initDefaultCommand() {
        System.out.println("In StormNetSubsystem default command");
        setDefaultCommand(new StormConnect());
    }

    public double getLidarDistance() {
		return m_stormNet.getLidarDistance();
	}

	public double getLidarOffset() {
		return m_stormNet.getLidarOffset();
	}

	public double getLineIROffset()  { 
        return m_stormNet.getLineIROffset();
    } 

    public double getLineIRCount()  { 
        return m_stormNet.getLineIRCount();
    } 

    public Boolean lineDetected() {
        double count = getLineIRCount();
        return((count > 0) && (count < 12));
    }


    //only robot should call this
    public void setStatusLights(StatusLight light, int state){
        /* **********
         *  0t - turn on precision mode
         *  0f - turn off precision mode
         *  1t - white (error?)
         *  1r - vision mode for rocket
         *  1c - vision mode for cargo ship
         *  1f - turn off vision
         *  2t - vacuum insufficient
         *  2f - turn off vacuum light
         *  3t - intake vacuum armed
         *  3f - intake vacuum unarmed
         */

        if (!Robot.useStatusLights) return;

//        System.out.println("VacArmed.get = " + vacArmedLight.get() + "   VacInsufficient.get = " + vacInsufficientLight.get());

        switch(light){
            case Precision:
                precisionModeLight.set(state != 0 ? Relay.Value.kForward : Relay.Value.kOff);
                break;
            case Vision:
                if(state == 2) visionModeLight.set(Relay.Value.kForward); // Rocket mode
                else if(state == 1) visionModeLight.set(Relay.Value.kReverse); // Cargo mode
                else visionModeLight.set(Relay.Value.kOff);
                break;
            case Vacuum:
                vacInsufficientLight.set(state != 0 ? Relay.Value.kForward : Relay.Value.kOff);
                break;
            case Intake:
                vacArmedLight.set(state != 0 ? Relay.Value.kForward : Relay.Value.kOff);
                break;
            default:
                System.out.println("Oh no! Someone must have forgot to put break statements.");
        }
    }

    @Override
    public void periodic() {
    }
}

