/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc5422.Minimec.subsystems;

import org.usfirst.frc5422.Minimec.Robot;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5422.utils.StormProp;
import edu.wpi.first.networktables.NetworkTableEntry;

/**
 *
 */
public class TapeAlign extends PIDSubsystem {

    private double m_pid_out;
    private ShuffleboardTab m_debug_tab;
    private NetworkTableEntry m_raw_entry; 
    private NetworkTableEntry m_ena_entry;

    private ShuffleboardTab match_tab;
    private NetworkTableEntry match_tape_state;

    private boolean useShuffleboard = StormProp.getBoolean("debugconfig", false);

    // Leave setpoint at 0. We will calculate relative position to target
    // so that we can always set input to 0 when we don't have an object
    // to keep the PID from reacting.

    // Initialize your subsystem here
    public TapeAlign() {
        super("TapeAlign", .2, 0.0, .04, 0.0, .02);
        getPIDController().setContinuous(false);
        getPIDController().setName("TapeAlign", "PIDSubsystem Controller");
        LiveWindow.add(getPIDController());
        getPIDController().setAbsoluteTolerance(0);   // FIXME property TapePidTolerance
        getPIDController().setOutputRange(-0.3, 0.3);  // FIXME property TapePidRange

        // Debug data
        if (useShuffleboard){
        m_debug_tab = Shuffleboard.getTab("TapeAlignDebug");
        m_raw_entry = m_debug_tab.add("Sensor Value (cm)", 0).getEntry();
        m_ena_entry = m_debug_tab.add("Enabled", false).getEntry();
        SmartDashboard.getNumber("TapeAlign PID Value", get_pid_output());}
        //TODO: Test the line above

        match_tab = Shuffleboard.getTab("Match Tab");
        match_tape_state = match_tab.add("Tape Detection", false).getEntry();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }


    public void enable() {
        getPIDController().enable();
        if (useShuffleboard){
        SmartDashboard.putString("Tape Subsystem", "ENABLED");
        m_ena_entry.setBoolean(true);}
    }

    public void disable() {
        getPIDController().disable();
        if (useShuffleboard) {
        SmartDashboard.putString("Tape Subsystem", "DISABLED");
        m_ena_entry.setBoolean(false); }
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        double offset = Robot.stormNetSubsystem.getLineIROffset();

        if (useShuffleboard) m_raw_entry.setDouble(offset);

        return(offset);
    }

    public double get_pid_output() {
        return(m_pid_out);
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        m_pid_out = output;  
    }

    public boolean tapeDetected() {
        return(Robot.stormNetSubsystem.lineDetected());
    }

    public void periodic() {
        //match_tape_state.setBoolean(tapeDetected());
    }
}

