// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5422.Minimec;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// Commands
import org.usfirst.frc5422.Minimec.commands.*;

// subsystems
import org.usfirst.frc5422.Minimec.subsystems.*;
import org.usfirst.frc5422.Minimec.subsystems.elevator.Elevator;
import org.usfirst.frc5422.Minimec.subsystems.intake.Intake;
import org.usfirst.frc5422.Minimec.subsystems.pneumatics.*;
import org.usfirst.frc5422.Minimec.subsystems.backjack.*;
import org.usfirst.frc5422.utils.StatusLight;
import org.usfirst.frc5422.utils.StormProp;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in
 * the project.
 */
public class Robot extends TimedRobot {
    public static final boolean useCompressor = StormProp.getBoolean("useCompressor",true);
    public static final boolean useValveControl = StormProp.getBoolean("useValveControl",true);
    public static final boolean useStormNet = StormProp.getBoolean("useStormNet",true);
    public static final boolean useDrive = StormProp.getBoolean("useDrive",true);
    public static final boolean useElevator = StormProp.getBoolean("useElevator",true);
    public static final boolean useArm = StormProp.getBoolean("useArm",true);
    public static final boolean useBackjack = StormProp.getBoolean("useBackjack",true);
    public static final boolean useIntake = StormProp.getBoolean("useIntake",true);
    public static final boolean useVision = StormProp.getBoolean("useVision",true);
    public static final boolean useNavX = StormProp.getBoolean("useNavX",true);
    public static final boolean useStatusLights = StormProp.getBoolean("useStatusLights", false);

    public static final boolean testBackjack = StormProp.getBoolean("testBackjack",false);
    public static final boolean testStormNet = StormProp.getBoolean("testStormNet",false);


    public static Arm arm;
    public static Drive drive;
    public static StormNetSubsystem stormNetSubsystem;
    public static Backjack backjack;
    public static PixyVision pixyVision;
    public static NavX navX;
    public static Compression compressor;
    public static ValveControl valveControl;
    public static Intake intake;
    public static Elevator elevator;
    public static TapeAlign tapeAlignSys;
    public static LidarAlign lidarAlignSys;
    public static Boolean debug;

    // DONT INSTANTIATE DSIO!!!!
    public static OI oi;


    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        System.out.println("robotInit()");
        debug = StormProp.getBoolean("debug",false);

        // Ideally this would be handled uniformly using a subclass of SubSystem, but not now
        drive = new Drive();  // Drive always instanced, but will not instance talons if useDrive is false

        if (useCompressor) compressor = new Compression();

        if (useValveControl) valveControl = new ValveControl();

        if (useArm) arm = new Arm();

        if (useElevator){
            if (debug) System.out.println("Creating Elevator");
            elevator = new Elevator();
        }

        if (useBackjack) backjack = new Backjack();

        if (useIntake) intake = new Intake();

        if (useVision) pixyVision = new PixyVision(StormProp.getString("visionTable","vision"), true);

        if (useNavX) navX = new NavX();


        if (useStormNet) {
    	    stormNetSubsystem = new StormNetSubsystem();
            System.out.println("eeeeee");
	        tapeAlignSys = new TapeAlign();
	        lidarAlignSys = new LidarAlign();
	    }   

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        onInitCheck();

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
        System.out.println("disabledInit()");
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        System.out.println("autonomousInit()");
        onInitCheck();
        navX.calibrate();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        System.out.println("teleopInit()");
        onInitCheck();
    }

    /**
     * This function is called periodically during operator control
     */

    @Override
    public void teleopPeriodic() {
//        System.out.println("Line sensor output: " + stormNetSubsystem.getLineIROffset());
        Scheduler.getInstance().run();
    }

    @Override
    public void testPeriodic()
    {
        Scheduler.getInstance().run();
    }


    // We have a few buttons that are really switches. They might be in either position when the match starts
    // Try to set the subsystem state accordingly
    public void onInitCheck() {
        System.out.println("onInitCheck()");
    }

    public static void setStatusLight(StatusLight light, int s){
        stormNetSubsystem.setStatusLights(light, s);
    }
}
